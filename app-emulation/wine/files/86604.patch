--- a/dlls/ntdll/tests/file.c
+++ b/dlls/ntdll/tests/file.c
@@ -1107,6 +1107,50 @@ static void test_iocp_fileio(HANDLE h)
     }
 
     CloseHandle( hPipeClt );
+
+    /* test associating a completion port with a handle after an async is queued */
+    hPipeSrv = CreateNamedPipeA( pipe_name, PIPE_ACCESS_INBOUND | FILE_FLAG_OVERLAPPED, PIPE_TYPE_MESSAGE | PIPE_READMODE_MESSAGE | PIPE_WAIT, 4, 1024, 1024, 
1000, NULL );
+    ok( hPipeSrv != INVALID_HANDLE_VALUE, "Cannot create named pipe\n" );
+    if (hPipeSrv == INVALID_HANDLE_VALUE )
+        return;
+    hPipeClt = CreateFileA( pipe_name, GENERIC_WRITE, 0, NULL, OPEN_EXISTING, FILE_FLAG_NO_BUFFERING | FILE_FLAG_OVERLAPPED, NULL );
+    ok( hPipeClt != INVALID_HANDLE_VALUE, "Cannot connect to pipe\n" );
+    if (hPipeClt != INVALID_HANDLE_VALUE)
+    {
+        OVERLAPPED o = {0,};
+        BYTE send_buf[TEST_BUF_LEN], recv_buf[TEST_BUF_LEN];
+        DWORD read;
+        long count;
+
+        memset( send_buf, 0, TEST_BUF_LEN );
+        memset( recv_buf, 0xde, TEST_BUF_LEN );
+        count = get_pending_msgs(h);
+        ok( !count, "Unexpected msg count: %ld\n", count );
+        ReadFile( hPipeSrv, recv_buf, TEST_BUF_LEN, &read, &o);
+
+        U(iosb).Status = 0xdeadbeef;
+        res = pNtSetInformationFile( hPipeSrv, &iosb, &fci, sizeof(fci), FileCompletionInformation );
+        ok( res == STATUS_SUCCESS, "NtSetInformationFile failed: %x\n", res );
+        ok( U(iosb).Status == STATUS_SUCCESS, "iosb.Status invalid: %x\n", U(iosb).Status );
+        count = get_pending_msgs(h);
+        ok( !count, "Unexpected msg count: %ld\n", count );
+
+        WriteFile( hPipeClt, send_buf, TEST_BUF_LEN, &read, NULL );
+
+        if (get_msg(h))
+        {
+            ok( completionKey == CKEY_SECOND, "Invalid completion key: %lx\n", completionKey );
+            ok( ioSb.Information == 3, "Invalid ioSb.Information: %ld\n", ioSb.Information );
+            ok( U(ioSb).Status == STATUS_SUCCESS, "Invalid ioSb.Status: %x\n", U(ioSb).Status);
+            ok( completionValue == (ULONG_PTR)&o, "Invalid completion value: %lx\n", completionValue );
+            ok( !memcmp( send_buf, recv_buf, TEST_BUF_LEN ), "Receive buffer (%x %x %x) did not match send buffer (%x %x %x)\n", recv_buf[0], recv_buf[1], 
recv_buf[2], send_buf[0], send_buf[1], send_buf[2] );
+        }
+        count = get_pending_msgs(h);
+        ok( !count, "Unexpected msg count: %ld\n", count );
+    }
+
+    CloseHandle( hPipeSrv );
+    CloseHandle( hPipeClt );
 }
 
 static void test_file_basic_information(void)

--- a/server/async.c
+++ b/server/async.c
@@ -337,3 +337,13 @@ void async_wake_up( struct async_queue *queue, unsigned int status )
         if (status == STATUS_ALERTED) break;  /* only wake up the first one */
     }
 }
+
+/* update an async to correspond to new file object information */
+void async_update( struct async_queue *queue )
+{
+    if (!queue) return;
+
+    if (!queue->completion && queue->fd)
+        queue->completion = fd_get_completion( queue->fd, &queue->comp_key );
+}
+
--- a/server/fd.c
+++ b/server/fd.c
@@ -2103,6 +2103,14 @@ void default_fd_cancel_async( struct fd *fd, struct process *process, struct thr
         set_error( STATUS_NOT_FOUND );
 }
 
+/* default update_async() fd routine */
+void default_fd_update_async( struct fd *fd )
+{
+    async_update( fd->read_q );
+    async_update( fd->write_q );
+    async_update( fd->wait_q );
+}
+
 /* default flush() routine */
 void no_flush( struct fd *fd, struct event **event )
 {
@@ -2350,6 +2358,7 @@ DECL_HANDLER(set_completion_info)
         {
             fd->completion = get_completion_obj( current->process, req->chandle, IO_COMPLETION_MODIFY_STATE );
             fd->comp_key = req->ckey;
+            fd->fd_ops->update_async( fd );
         }
         else set_error( STATUS_INVALID_PARAMETER );
         release_object( fd );
diff --git a/server/file.c b/server/file.c
index 02a1e37..83634c5 100644
--- a/server/file.c
+++ b/server/file.c
@@ -102,7 +102,8 @@ static const struct fd_ops file_fd_ops =
     default_fd_ioctl,             /* ioctl */
     default_fd_queue_async,       /* queue_async */
     default_fd_reselect_async,    /* reselect_async */
-    default_fd_cancel_async       /* cancel_async */
+    default_fd_cancel_async,      /* cancel_async */
+    default_fd_update_async       /* update_async */
 };
 
 static inline int is_overlapped( const struct file *file )
--- a/server/file.h
+++ b/server/file.h
@@ -48,6 +48,8 @@ struct fd_ops
     void (*reselect_async)( struct fd *, struct async_queue *queue );
     /* cancel an async operation */
     void (*cancel_async)(struct fd *, struct process *process, struct thread *thread, client_ptr_t iosb);
+    /* update an async operation to correspond to changes in the file object */
+    void (*update_async)(struct fd *);
 };
 
 /* file descriptor functions */
@@ -92,6 +94,7 @@ extern void no_fd_queue_async( struct fd *fd, const async_data_t *data, int type
 extern void default_fd_queue_async( struct fd *fd, const async_data_t *data, int type, int count );
 extern void default_fd_reselect_async( struct fd *fd, struct async_queue *queue );
 extern void default_fd_cancel_async( struct fd *fd, struct process *process, struct thread *thread, client_ptr_t iosb );
+extern void default_fd_update_async( struct fd *fd );
 extern void no_flush( struct fd *fd, struct event **event );
 extern void main_loop(void);
 extern void remove_process_locks( struct process *process );
@@ -164,6 +167,7 @@ extern void async_terminate( struct async *async, unsigned int status );
 extern int async_wake_up_by( struct async_queue *queue, struct process *process,
                              struct thread *thread, client_ptr_t iosb, unsigned int status );
 extern void async_wake_up( struct async_queue *queue, unsigned int status );
+extern void async_update( struct async_queue *queue );
 extern struct completion *fd_get_completion( struct fd *fd, apc_param_t *p_key );
 extern void fd_copy_completion( struct fd *src, struct fd *dst );
 
--- a/server/mailslot.c
+++ b/server/mailslot.c
@@ -102,7 +102,8 @@ static const struct fd_ops mailslot_fd_ops =
     default_fd_ioctl,           /* ioctl */
     mailslot_queue_async,       /* queue_async */
     default_fd_reselect_async,  /* reselect_async */
-    default_fd_cancel_async     /* cancel_async */
+    default_fd_cancel_async,    /* cancel_async */
+    default_fd_update_async     /* update_async */
 };
 
 
@@ -152,7 +153,8 @@ static const struct fd_ops mail_writer_fd_ops =
     default_fd_ioctl,            /* ioctl */
     default_fd_queue_async,      /* queue_async */
     default_fd_reselect_async,   /* reselect_async */
-    default_fd_cancel_async      /* cancel_async */
+    default_fd_cancel_async,     /* cancel_async */
+    default_fd_update_async      /* update_async */
 };
 
 
@@ -202,7 +204,8 @@ static const struct fd_ops mailslot_device_fd_ops =
     default_fd_ioctl,               /* ioctl */
     default_fd_queue_async,         /* queue_async */
     default_fd_reselect_async,      /* reselect_async */
-    default_fd_cancel_async         /* cancel_async */
+    default_fd_cancel_async,        /* cancel_async */
+    default_fd_update_async         /* update_async */
 };
 
 static void mailslot_destroy( struct object *obj)
--- a/server/mapping.c
+++ b/server/mapping.c
@@ -103,7 +103,8 @@ static const struct fd_ops mapping_fd_ops =
     no_fd_ioctl,                  /* ioctl */
     no_fd_queue_async,            /* queue_async */
     default_fd_reselect_async,    /* reselect_async */
-    default_fd_cancel_async       /* cancel_async */
+    default_fd_cancel_async,      /* cancel_async */
+    default_fd_update_async       /* update_async */
 };
 
 static struct list shared_list = LIST_INIT(shared_list);
--- a/server/named_pipe.c
+++ b/server/named_pipe.c
@@ -173,6 +173,7 @@ static const struct fd_ops pipe_server_fd_ops =
     default_fd_queue_async,       /* queue_async */
     default_fd_reselect_async,    /* reselect_async */
     default_fd_cancel_async,      /* cancel_async */
+    default_fd_update_async       /* update_async */
 };
 
 /* client end functions */
@@ -212,7 +213,8 @@ static const struct fd_ops pipe_client_fd_ops =
     default_fd_ioctl,             /* ioctl */
     default_fd_queue_async,       /* queue_async */
     default_fd_reselect_async,    /* reselect_async */
-    default_fd_cancel_async       /* cancel_async */
+    default_fd_cancel_async,      /* cancel_async */
+    default_fd_update_async       /* update_async */
 };
 
 static void named_pipe_device_dump( struct object *obj, int verbose );
@@ -256,7 +258,8 @@ static const struct fd_ops named_pipe_device_fd_ops =
     named_pipe_device_ioctl,          /* ioctl */
     default_fd_queue_async,           /* queue_async */
     default_fd_reselect_async,        /* reselect_async */
-    default_fd_cancel_async           /* cancel_async */
+    default_fd_cancel_async,          /* cancel_async */
+    default_fd_update_async           /* update_async */
 };
 
 static void named_pipe_dump( struct object *obj, int verbose )
--- a/server/serial.c
+++ b/server/serial.c
@@ -112,7 +112,8 @@ static const struct fd_ops serial_fd_ops =
     default_fd_ioctl,             /* ioctl */
     serial_queue_async,           /* queue_async */
     default_fd_reselect_async,    /* reselect_async */
-    default_fd_cancel_async       /* cancel_async */
+    default_fd_cancel_async,      /* cancel_async */
+    default_fd_update_async       /* update_async */
 };
 
 /* check if the given fd is a serial port */
--- a/server/signal.c
+++ b/server/signal.c
@@ -90,7 +90,8 @@ static const struct fd_ops handler_fd_ops =
     NULL,                     /* ioctl */
     NULL,                     /* queue_async */
     NULL,                     /* reselect_async */
-    NULL                      /* cancel_async */
+    NULL,                     /* cancel_async */
+    NULL                      /* update_async */
 };
 
 static struct handler *handler_sighup;
--- a/server/sock.c
+++ b/server/sock.c
@@ -119,6 +119,7 @@ static enum server_fd_type sock_get_fd_type( struct fd *fd );
 static void sock_queue_async( struct fd *fd, const async_data_t *data, int type, int count );
 static void sock_reselect_async( struct fd *fd, struct async_queue *queue );
 static void sock_cancel_async( struct fd *fd, struct process *process, struct thread *thread, client_ptr_t iosb );
+static void sock_update_async( struct fd *fd );
 
 static int sock_get_ntstatus( int err );
 static int sock_get_error( int err );
@@ -153,7 +154,8 @@ static const struct fd_ops sock_fd_ops =
     default_fd_ioctl,             /* ioctl */
     sock_queue_async,             /* queue_async */
     sock_reselect_async,          /* reselect_async */
-    sock_cancel_async             /* cancel_async */
+    sock_cancel_async,            /* cancel_async */
+    sock_update_async             /* update_async */
 };
 
 
@@ -573,6 +575,15 @@ static void sock_cancel_async( struct fd *fd, struct process *process, struct th
         set_error( STATUS_NOT_FOUND );
 }
 
+static void sock_update_async( struct fd *fd )
+{
+    struct sock *sock = get_fd_user( fd );
+    assert( sock->obj.ops == &sock_ops );
+
+    async_update( sock->read_q );
+    async_update( sock->write_q );
+}
+
 static struct fd *sock_get_fd( struct object *obj )
 {
     struct sock *sock = (struct sock *)obj;
--- a/server/thread.c
+++ b/server/thread.c
@@ -157,7 +157,8 @@ static const struct fd_ops thread_fd_ops =
     NULL,                       /* ioctl */
     NULL,                       /* queue_async */
     NULL,                       /* reselect_async */
-    NULL                        /* cancel_async */
+    NULL,                       /* cancel_async */
+    NULL                        /* update_async */
 };
 
 static struct list thread_list = LIST_INIT(thread_list);
