--- a/server/sock.c
+++ b/server/sock.c
@@ -119,6 +119,7 @@ static enum server_fd_type sock_get_fd_type( struct fd *fd );
 static void sock_queue_async( struct fd *fd, const async_data_t *data, int type, int count );
 static void sock_reselect_async( struct fd *fd, struct async_queue *queue );
 static void sock_cancel_async( struct fd *fd, struct process *process, struct thread *thread, client_ptr_t iosb );
+static void sock_update_async( struct fd *fd );
 
 static int sock_get_ntstatus( int err );
 static int sock_get_error( int err );
@@ -153,7 +154,8 @@ static const struct fd_ops sock_fd_ops =
     default_fd_ioctl,             /* ioctl */
     sock_queue_async,             /* queue_async */
     sock_reselect_async,          /* reselect_async */
-    sock_cancel_async             /* cancel_async */
+    sock_cancel_async,            /* cancel_async */
+    sock_update_async             /* update_async */
 };
 
 
@@ -573,6 +575,15 @@ static void sock_cancel_async( struct fd *fd, struct process *process, struct th
         set_error( STATUS_NOT_FOUND );
 }
 
+static void sock_update_async( struct fd *fd )
+{
+    struct sock *sock = get_fd_user( fd );
+    assert( sock->obj.ops == &sock_ops );
+
+    async_update( sock->read_q );
+    async_update( sock->write_q );
+}
+
 static struct fd *sock_get_fd( struct object *obj )
 {
     struct sock *sock = (struct sock *)obj;
